var searchIndex = JSON.parse('{\
"object_detector_rust":{"doc":"Object Detector Rust üîç","t":"AAAAAAAAAAAAADLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLMMMDIDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIIDDDKLLKLLKLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLKLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLMLLMLLMLLLLLLFLLLLLLLLLLLLDIDILLLLLLLLLLKLLLLLLLLLLLLLLLLKLLLLKLLLLLLLLLLLLLLLLLLLLLLDDIDLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIKCCCCCCCCCCCCCCCCCCCCCCCCACFIKDDGDMLLLLLLMLLLLLLMLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLMMFFFFFFFFDDILLLLLLLLLLLLLLLLMMLLLLMMMLLLLLLLLLLLLLLLLLLLLMMKLL","n":["bbox","classifier","dataset","detection","detector","feature","predictable","prelude","tests","trainable","types","utils","window_generator","BBox","approx_from","approx_into","borrow","borrow_mut","bottom","clone","clone_into","default","eq","fmt","from","from_subset","height","intersect_area","intersect_height","intersect_width","into","is_in_subset","left","merge","new","overlap","right","self_area","to_owned","to_subset","to_subset_unchecked","top","try_from","try_from","try_into","try_into","type_id","union_area","value_from","value_into","vzip","width","x","y","BayesClassifier","Classifier","CombinedClassifier","RandomForestClassifier","SVMClassifier","approx_from","approx_from","approx_from","approx_from","approx_into","approx_into","approx_into","approx_into","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","default","default","default","deserialize","deserialize","deserialize","do_erased_serialize","do_erased_serialize","do_erased_serialize","eq","eq","eq","eq","erased_serialize","erased_serialize","erased_serialize","fit","fit","fit","fit","fmt","fmt","fmt","fmt","from","from","from","from","from_subset","from_subset","from_subset","from_subset","into","into","into","into","is_in_subset","is_in_subset","is_in_subset","is_in_subset","new","new","new","new","predict","predict","predict","predict","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","value_from","value_from","value_from","value_from","value_into","value_into","value_into","value_into","vzip","vzip","vzip","vzip","AnnotatedImageSet","DataSet","DummyDataSet","FolderDataSet","MemoryDataSet","add_annotated_image","add_annotated_image","add_annotated_image","annotated_images","annotated_images","annotated_images","annotated_images_len","annotated_images_len","annotated_images_len","approx_from","approx_from","approx_from","approx_into","approx_into","approx_into","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","default","default","fmt","from","from","from","from_subset","from_subset","from_subset","get_data","get_data","get_data","get_data","into","into","into","is_in_subset","is_in_subset","is_in_subset","len","len","len","len","load","load","load","load","load_label_names","new","new","new","new_from_annotated_image_set","new_test","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","value_from","value_from","value_from","value_into","value_into","value_into","vzip","vzip","vzip","Detection","approx_from","approx_into","bbox","borrow","borrow_mut","class","clone","clone_into","confidence","eq","fmt","from","from_subset","into","is_in_subset","merge_overlapping_detections","new","to_owned","to_subset","to_subset_unchecked","try_from","try_from","try_into","try_into","type_id","value_from","value_into","vzip","BriefSVMDetector","Detector","HOGSVMDetector","PersistentDetector","approx_from","approx_from","approx_into","approx_into","borrow","borrow","borrow_mut","borrow_mut","default","default","detect","detect","detect","eq","eq","fit","fit","fmt","fmt","from","from","from_subset","from_subset","into","into","is_in_subset","is_in_subset","load","load","load","new","new","save","save","save","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","value_from","value_from","value_into","value_into","vzip","vzip","BriefFeature","DummyFeature","Feature","HOGFeature","approx_from","approx_from","approx_from","approx_into","approx_into","approx_into","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","default","default","eq","eq","extract","extract","extract","extract","fmt","fmt","fmt","from","from","from","from_subset","from_subset","from_subset","into","into","into","is_in_subset","is_in_subset","is_in_subset","new","new","new","new_with_options","new_with_threshold_and_length","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","value_from","value_from","value_from","value_into","value_into","value_into","vzip","vzip","vzip","Predictable","predict","AnnotatedImage","AnnotatedImageSet","Annotation","BBox","BayesClassifier","BriefFeature","BriefSVMDetector","Class","Classifier","DataSet","Detection","Detector","Feature","HOGFeature","HOGSVMDetector","MemoryDataSet","PersistentDetector","Predictable","PyramidWindow","RandomForestClassifier","SVMClassifier","SlidingWindow","Trainable","WindowGenerator","test_image","test_image","test_image","Trainable","fit","AnnotatedImage","Annotation","Class","ImageWindow","annotations","approx_from","approx_from","approx_from","approx_into","approx_into","approx_into","bbox","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","class","clone","clone","clone","clone_into","clone_into","clone_into","eq","eq","eq","fmt","fmt","fmt","from","from","from","from_subset","from_subset","from_subset","image","into","into","into","is_in_subset","is_in_subset","is_in_subset","to_owned","to_owned","to_owned","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","value_from","value_from","value_from","value_into","value_into","value_into","view","vzip","vzip","vzip","x","y","add_hard_negative_samples","crop_bbox","draw_bboxes","evaluate_accuracy","evaluate_precision","extract_data","generate_annotations","generate_negative_samples","PyramidWindow","SlidingWindow","WindowGenerator","approx_from","approx_from","approx_into","approx_into","borrow","borrow","borrow_mut","borrow_mut","eq","eq","fmt","fmt","from","from","from_subset","from_subset","height","height","into","into","is_in_subset","is_in_subset","layer_scales","step_size","step_size","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","value_from","value_from","value_into","value_into","vzip","vzip","width","width","windows","windows","windows"],"q":[[0,"object_detector_rust"],[13,"object_detector_rust::bbox"],[54,"object_detector_rust::classifier"],[176,"object_detector_rust::dataset"],[265,"object_detector_rust::detection"],[294,"object_detector_rust::detector"],[353,"object_detector_rust::feature"],[427,"object_detector_rust::predictable"],[429,"object_detector_rust::prelude"],[453,"object_detector_rust::tests"],[455,"object_detector_rust::tests::test_image"],[456,"object_detector_rust::trainable"],[458,"object_detector_rust::types"],[538,"object_detector_rust::utils"],[546,"object_detector_rust::window_generator"],[599,"core::result"],[600,"core::fmt"],[601,"core::fmt"],[602,"core::any"],[603,"linfa::dataset"],[604,"core::clone"],[605,"linfa::dataset"],[606,"smartcore::numbers::basenum"],[607,"smartcore::numbers::floatnum"],[608,"core::cmp"],[609,"core::cmp"],[610,"serde::de"],[611,"erased_serde::ser"],[612,"ndarray::aliases"],[613,"ndarray::aliases"],[614,"core::fmt"],[615,"serde::ser"],[616,"serde::ser"],[617,"alloc::boxed"],[618,"image::dynimage"],[619,"alloc::vec"],[620,"core::error"],[621,"std::io"],[622,"std::io"],[623,"ndarray::aliases"]],"d":["This module contains the <code>BBox</code> struct for representing ‚Ä¶","The classifier module provides traits and implementations ‚Ä¶","This module contains the <code>DataSet</code> trait for representing ‚Ä¶","Struct for representing a detected object","A trait for object detectors","This module contains traits and structs for feature ‚Ä¶","Trait for objects that can make predictions","the object-detector-rust prelude","some structs and functions usable for tests","Trait for objects that can be trained","The types module contains types for representing ‚Ä¶","Utility functions for working with images","The module for different window generators.","Struct for representing a bounding box","","","","","Returns the bottom coordinate of the bounding box","","","","","","Returns the argument unchanged.","","Height of the bounding box","Calculates the area of the intersection between two ‚Ä¶","Calculates the height of the intersection between two ‚Ä¶","Calculates the width of the intersection between two ‚Ä¶","Calls <code>U::from(self)</code>.","","Returns the left coordinate of the bounding box","Merges two bounding boxes into a single bounding box that ‚Ä¶","Creates a new bounding box with the specified coordinates ‚Ä¶","Calculates the overlap between two bounding boxes as the ‚Ä¶","Returns the right coordinate of the bounding box","Calculates the area of the bounding box","","","","Returns the top coordinate of the bounding box","","","","","","Calculates the area of the union between two bounding boxes","","","","Width of the bounding box","X coordinate of the top-left corner of the bounding box","Y coordinate of the top-left corner of the bounding box","The <code>BayesClassifier</code> struct provides a Gaussian Naive Bayes ‚Ä¶","The Classifier trait defines the behavior of a machine ‚Ä¶","A classifier that combines the predictions of two other ‚Ä¶","A struct for training and making predictions with a random ‚Ä¶","The SVMClassifier struct represents an SVM classifier with ‚Ä¶","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Creates a new CombinedClassifier","Creates a new <code>BayesClassifier</code> instance with default ‚Ä¶","Creates a new <code>SVMClassifier</code>.","Creates a new instance of the <code>RandomForestClassifier</code> ‚Ä¶","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","trait of a set of annotated images","Trait representing a dataset of images and labels for ‚Ä¶","Dummy dataset that returns a fixed set of images and labels","Struct for representing a dataset loaded from a folder","Struct for representing a dataset in memory","adds an annotated image","","Adds an annotated image to the dataset","returns iterator over annotated images","","returns iterator over images","returns length of annotated images","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the images and labels for training","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns the number of images in the dataset","","","","Loads the dataset","","","","Loads a list of label names from the specified file path.","Creates a new dataset from the specified folder","Creates a new, empty dataset","Creates a new <code>DummyDataSet</code>","Creates a new dataset by copying the annotated images from ‚Ä¶","small test dataset","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Struct for representing a detected object","","","Bounding box of the detected object","","","Class of the detected object","","","Confidence of the detection","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Merges overlapping detections with the same class","Creates a new <code>Detection</code> with the given bounding box, ‚Ä¶","","","","","","","","","","","","Struct representing an object detector using HOG features ‚Ä¶","Trait for object detection","Struct representing an object detector using HOG features ‚Ä¶","Trait for objects that can be persisted to and loaded from ‚Ä¶","","","","","","","","","","","Detects objects in an image","","","","","Trains the HOGSVMDetector on the given training data and ‚Ä¶","Trains the HOGSVMDetector on the given training data and ‚Ä¶","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Loads the detector from the provided reader.","","","Creates a new <code>HOGSVMDetector</code> with default parameters","Creates a new <code>HOGSVMDetector</code> with default parameters","Saves the detector to the provided writer.","","","","","","","","","","","","","","","","","","","","","","","Struct for extracting BRIEF (Binary Robust Independent ‚Ä¶","Dummy feature descriptor that always returns the same value","Trait for feature descriptors that can be extracted from ‚Ä¶","Struct for extracting HOG features from images.","","","","","","","","","","","","","Creates a new HOG feature extractor with default options","","","","Extracts the feature descriptor from the given image","","Extracts the feature descriptor from the given image","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Creates a new HOG feature extractor","Creates a new <code>BriefFeature</code> instance with default ‚Ä¶","Creates a new dummy feature descriptor with the given value","Creates a new <code>HogFeature</code> with the given <code>HogOptions</code>.","Creates a new <code>BriefFeature</code> with the given threshold and ‚Ä¶","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Trait for objects that can make predictions","Makes predictions on the provided data using the trained ‚Ä¶","","","","","","","","","","","","","","","","","","","","","","","","","a simple image for testing purposes","","a simple image for testing purposes","Trait for objects that can be trained","Trains the <code>SVMClassifier</code> on the provided training data.","Image annotated by list of Annotations","annotation is a object bounding box in image and class type","object class type","Struct representing a window over an image with a position","Annotations for the image","","","","","","","Bounding box of the object","","","","","","","Class of the object","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Image","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","View of the image within the window","","","","X position of the window","Y position of the window","generates hard negative samples, see: Hard Negative Mining","Crops an image to the dimensions specified in the bounding ‚Ä¶","Draws bounding boxes on an image.","Computes the accuracy of a model‚Äôs predictions","Computes the precision of a model‚Äôs predictions","Transforms a given vector of extracted features and a ‚Ä¶","Generates random annotations for the provided annotated ‚Ä¶","generates negative samples ///","Struct for generating sliding windows over an image","Struct for generating sliding windows over an image","Trait for generating windows over an image","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Height of the layer 1 window","Height of the window","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","the pyramid layers","Step size for moving the window","Step size for moving the window","","","","","","","","","","","","","","","","","","","","","Width of the layer 1 window","Width of the window","Generates a series of windows over the given image","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,12,17,18,20,12,17,18,20,12,17,18,20,12,17,18,20,12,17,18,12,17,18,12,17,18,20,12,18,20,12,18,20,12,17,18,20,12,18,20,12,17,18,20,12,17,18,20,12,17,18,20,12,17,18,20,12,17,18,20,12,17,18,20,12,17,18,20,12,17,18,20,12,18,20,12,17,18,12,17,18,20,12,17,18,20,12,12,17,17,18,18,20,20,12,12,17,17,18,18,20,20,12,17,18,20,12,17,18,20,12,17,18,20,12,17,18,20,0,0,0,0,0,50,40,41,50,40,41,50,40,41,40,41,45,40,41,45,40,41,45,40,41,45,41,45,41,40,41,45,40,41,45,72,40,41,45,40,41,45,40,41,45,72,40,41,45,72,40,41,45,40,40,41,45,41,41,40,41,45,40,41,45,40,40,41,41,45,45,40,40,41,41,45,45,40,41,45,40,41,45,40,41,45,40,41,45,0,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,0,51,51,51,51,51,51,51,51,51,51,51,51,0,0,0,0,54,55,54,55,54,55,54,55,54,55,66,54,55,54,55,54,55,54,55,54,55,54,55,54,55,54,55,73,54,55,54,55,73,54,55,54,55,54,55,54,54,55,55,54,54,55,55,54,55,54,55,54,55,54,55,0,0,0,0,59,60,61,59,60,61,59,60,61,59,60,61,59,60,59,60,74,59,60,61,59,60,61,59,60,61,59,60,61,59,60,61,59,60,61,59,60,61,59,60,59,60,61,59,60,61,59,59,60,60,61,61,59,59,60,60,61,61,59,60,61,59,60,61,59,60,61,59,60,61,0,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75,0,0,0,0,39,64,39,65,64,39,65,64,64,39,65,64,39,65,64,64,39,65,64,39,65,64,39,65,64,39,65,64,39,65,64,39,65,39,64,39,65,64,39,65,64,39,65,64,39,65,64,39,65,64,64,39,39,65,65,64,64,39,39,65,65,64,39,65,64,39,65,64,39,65,65,64,39,65,65,65,0,0,0,0,0,0,0,0,0,0,0,70,53,70,53,70,53,70,53,70,53,70,53,70,53,70,53,70,53,70,53,70,53,70,70,53,70,53,70,53,70,70,53,53,70,70,53,53,70,53,70,53,70,53,70,53,70,53,56,70,53],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,[[1,[-1]]],[]],[-1,[[1,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[2,3],[2,2],[[-1,-2],4,[],[]],[[],2],[[2,2],5],[[2,6],7],[-1,-1,[]],[-1,-2,[],[]],0,[[2,2],8],[[2,2],8],[[2,2],8],[-1,-2,[],[]],[-1,5,[]],[2,3],[[2,2],2],[[3,3,8,8],2],[[2,2],9],[2,3],[2,8],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[-1,-2,[],[]],[2,3],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-1]]],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,11,[]],[[2,2],8],[-1,[[1,[-1]]],[]],[-1,[[1,[-2]]],[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,[-1,[[1,[-1]]],[]],[-1,[[1,[-1]]],[]],[-1,[[1,[-1]]],[]],[-1,[[1,[-1]]],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[12,[-1,-2,-3,-4]]],[[12,[-1,-2,-3,-4]]],[13,14],[15,14],[[16,[-1,-2]],14],[[16,[-1,-2]],14]],[[[17,[-1,-2]]],[[17,[-1,-2]]],[13,14],[15,14]],[[[18,[-1,-2]]],[[18,[-1,-2]]],[13,14],[15,14]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[],[[12,[-1,-2,-3,-4]]],13,15,[[16,[-1,-2]],19],[[16,[-1,-2]],19]],[[],[[17,[-1,-2]]],[13,19],[15,19]],[[],[[18,[-1,-2]]],[13,19],[15,19]],[[],[[20,[-1,-2]]],[21,22,23,19],[21,24,19]],[-1,[[1,[[12,[-2,-3,-4,-5]]]]],25,13,15,[[16,[-2,-3]],26],[[16,[-2,-3]],26]],[-1,[[1,[[18,[-2,-3]]]]],25,[13,26],[15,26]],[-1,[[1,[[20,[-2,-3]]]]],25,[21,22,23,26],[21,24,26]],[[-1,27],[[1,[4,28]]],[]],[[-1,27],[[1,[4,28]]],[]],[[-1,27],[[1,[4,28]]],[]],[[[12,[-1,-2,-3,-4]],[12,[-1,-2,-3,-4]]],5,[13,29],[15,29],[[16,[-1,-2]],29],[[16,[-1,-2]],29]],[[[17,[-1,-2]],[17,[-1,-2]]],5,[13,29],[15,29]],[[[18,[-1,-2]],[18,[-1,-2]]],5,[13,29],[15,29]],[[[20,[-1,-2]],[20,[-1,-2]]],5,[21,22,23,29],[21,24,29]],[[-1,27],[[1,[4,30]]],[]],[[-1,27],[[1,[4,30]]],[]],[[-1,27],[[1,[4,30]]],[]],[[[12,[-1,-2,-3,-4]],[31,[-1]],[32,[-2]]],[[1,[4,33]]],13,15,[[16,[-1,-2]]],[[16,[-1,-2]]]],[[[17,[-1,-2]],[31,[-1]],[32,[-2]]],[[1,[4,33]]],13,15],[[[18,[9,5]],[31,[9]],[32,[5]]],[[1,[4,33]]]],[[[20,[-1,-2]],[31,[-1]],[32,[-2]]],[[1,[4,33]]],[21,22,23],[21,24]],[[[12,[-1,-2,-3,-4]],6],7,[13,34],[15,34],[[16,[-1,-2]],34],[[16,[-1,-2]],34]],[[[17,[-1,-2]],6],7,[13,34],[15,34]],[[[18,[-1,-2]],6],7,[13,34],[15,34]],[[[20,[-1,-2]],6],7,[21,22,23,34],[21,24,34]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,5,[]],[-1,5,[]],[-1,5,[]],[-1,5,[]],[[-3,-4],[[12,[-1,-2,-3,-4]]],13,15,[[16,[-1,-2]]],[[16,[-1,-2]]]],[[],[[17,[-1,-2]]],13,15],[[],[[18,[-1,-2]]],13,15],[[],[[20,[-1,-2]]],[21,22,23],[21,24]],[[[12,[-1,-2,-3,-4]],[31,[-1]]],[[1,[[35,[-2]],33]]],13,[15,36],[[16,[-1,-2]]],[[16,[-1,-2]]]],[[[17,[-1,-2]],[31,[-1]]],[[1,[[35,[-2]],33]]],13,15],[[[18,[9,5]],[31,[9]]],[[1,[[35,[5]],33]]]],[[[20,[-1,-2]],[31,[-1]]],[[1,[[35,[-2]],33]]],[21,22,23],[21,24]],[[[12,[-1,-2,-3,-4]],-5],1,13,15,[[16,[-1,-2]],37],[[16,[-1,-2]],37],38],[[[18,[-1,-2]],-3],1,[13,37],[15,37],38],[[[20,[-1,-2]],-3],1,[21,22,23,37],[21,24,37],38],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-1]]],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-1]]],[]],[-1,[[1,[-1]]],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-1]]],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,[[1,[-1]]],[]],[-1,[[1,[-1]]],[]],[-1,[[1,[-1]]],[]],[-1,[[1,[-1]]],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,[[-1,39],4,[]],[[40,39],4],[[41,39],4],[-1,[[43,[42]]],[]],[40,[[43,[42]]]],[41,[[43,[42]]]],[-1,44,[]],[40,44],[41,44],[-1,[[1,[-1]]],[]],[-1,[[1,[-1]]],[]],[-1,[[1,[-1]]],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],41],[[],45],[[41,6],7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[4,[[47,[46]],[47,[8]]]]],[]],[40,[[4,[[47,[46]],[47,[8]]]]]],[41,[[4,[[47,[46]],[47,[8]]]]]],[45,[[4,[[47,[46]],[47,[8]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,5,[]],[-1,5,[]],[-1,5,[]],[-1,44,[]],[40,44],[41,44],[45,44],[-1,[[1,[4,[43,[48]]]]],[]],[40,[[1,[4,[43,[48]]]]]],[41,[[1,[4,[43,[48]]]]]],[45,[[1,[4,[43,[48]]]]]],[49,[[47,[33]]]],[[49,8,8,[47,[33]]],40],[[],41],[[],45],[50,41],[[],41],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-1]]],[]],[-1,[[1,[-1]]],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-1]]],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,[[1,[-1]]],[]],[-1,[[1,[-1]]],[]],[-1,[[1,[-1]]],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,[[1,[-1]]],[]],[-1,[[1,[-2]]],[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],0,[51,51],[[-1,-2],4,[],[]],0,[[51,51],5],[[51,6],7],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,5,[]],[[[47,[51]]],[[47,[51]]]],[[2,52,9],51],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[-1,-2,[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-1]]],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,11,[]],[-1,[[1,[-1]]],[]],[-1,[[1,[-2]]],[],[]],[-1,-2,[],[]],0,0,0,0,[-1,[[1,[-1]]],[]],[-1,[[1,[-1]]],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[54,[53]]]],[[],[[55,[53]]]],[[-1,46],[[47,[51]]],[]],[[[54,[-1]],46],[[47,[51]]],[[56,[46]]]],[[[55,[-1]],46],[[47,[51]]],[[56,[46]]]],[[[54,[-1]],[54,[-1]]],5,[[56,[46]],29]],[[[55,[-1]],[55,[-1]]],5,[[56,[46]],29]],[[[54,[-1]],[31,[9]],[32,[5]]],[[1,[4,33]]],[[56,[46]]]],[[[55,[-1]],[31,[9]],[32,[5]]],[[1,[4,33]]],[[56,[46]]]],[[[54,[-1]],6],7,[[56,[46]],34]],[[[55,[-1]],6],7,[[56,[46]],34]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,5,[]],[-1,5,[]],[[-1,-2],[[1,[4,[43,[48]]]]],[],57],[[[54,[-1]],-2],[[1,[4,[43,[48]]]]],[[56,[46]]],57],[[[55,[-1]],-2],[[1,[4,[43,[48]]]]],[[56,[46]]],57],[-1,[[54,[-1]]],[[56,[46]]]],[-1,[[55,[-1]]],[[56,[46]]]],[[-1,-2],[[1,[4,[43,[48]]]]],[],58],[[[54,[-1]],-2],[[1,[4,[43,[48]]]]],[[56,[46]]],58],[[[55,[-1]],-2],[[1,[4,[43,[48]]]]],[[56,[46]]],58],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-1]]],[]],[-1,[[1,[-1]]],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],[-1,[[1,[-1]]],[]],[-1,[[1,[-1]]],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[-1,[[1,[-1]]],[]],[-1,[[1,[-1]]],[]],[-1,[[1,[-1]]],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],59],[[],60],[[59,59],5],[[60,60],5],[[-1,46],[[1,[[47,[9]],33]]],[]],[[59,46],[[1,[[47,[9]],33]]]],[[60,46],[[1,[[47,[9]],33]]]],[[61,46],[[1,[[47,[9]],33]]]],[[59,6],7],[[60,6],7],[[61,6],7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,5,[]],[-1,5,[]],[-1,5,[]],[[],59],[[],60],[9,61],[62,59],[[63,8],60],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-1]]],[]],[-1,[[1,[-1]]],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-1]]],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,[[1,[-1]]],[]],[-1,[[1,[-1]]],[]],[-1,[[1,[-1]]],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[-1,[31,[-2]]],[[1,[[35,[-3]],33]]],[],[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],46],0,[[-1,[31,[-2]],[32,[-3]]],[[1,[4,33]]],[],[],[]],0,0,0,0,0,[-1,[[1,[-1]]],[]],[-1,[[1,[-1]]],[]],[-1,[[1,[-1]]],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[64,64],[39,39],[[[65,[-1]]],[[65,[-1]]],14],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[64,64],5],[[39,39],5],[[[65,[-1]],[65,[-1]]],5,29],[[64,6],7],[[39,6],7],[[[65,[-1]],6],7,34],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,5,[]],[-1,5,[]],[-1,5,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[1,[-1]]],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-1]]],[]],[-1,[[1,[-1]]],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,[[1,[-1]]],[]],[-1,[[1,[-1]]],[]],[-1,[[1,[-1]]],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[50,66,52,[10,[44]],8,8],4],[[46,2],46],[[46,[67,[2]]],4],[[68,[69,[-1]],[35,[-2]]],9,13,15],[[68,[69,[-1]],[35,[-2]]],9,13,15],[[[47,[[47,[-1]]]],[47,[-2]]],[[4,[[69,[-1]],[35,[-2]]]]],[],[]],[[50,44,[10,[44]],8,8],4],[[50,66,52,[10,[44]],8,8],[[47,[39]]]],0,0,0,[-1,[[1,[-1]]],[]],[-1,[[1,[-1]]],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[70,70],5],[[53,53],5],[[70,6],7],[[53,6],7],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,5,[]],[-1,5,[]],0,0,0,[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[1,[-1]]],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-1]]],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],[-1,[[1,[-1]]],[]],[-1,[[1,[-1]]],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[-1,-2],[[47,[[65,[[71,[-2]]]]]]],[],[]],[[70,46],[[47,[[65,[[71,[46]]]]]]]],[[53,46],[[47,[[65,[[71,[46]]]]]]]]],"c":[],"p":[[4,"Result",599],[3,"BBox",13],[15,"i32"],[15,"tuple"],[15,"bool"],[3,"Formatter",600],[6,"Result",600],[15,"u32"],[15,"f32"],[4,"Option",601],[3,"TypeId",602],[3,"CombinedClassifier",54],[8,"Float",603],[8,"Clone",604],[8,"Label",603],[8,"Classifier",54],[3,"BayesClassifier",54],[3,"SVMClassifier",54],[8,"Default",605],[3,"RandomForestClassifier",54],[8,"Number",606],[8,"FloatNumber",607],[8,"PartialOrd",608],[8,"Ord",608],[8,"Deserializer",609],[8,"Deserialize",609],[8,"Serializer",610],[4,"ErrorImpl",610],[8,"PartialEq",608],[3,"Error",611],[6,"ArrayView2",612],[6,"ArrayView1",612],[3,"String",613],[8,"Debug",600],[6,"Array1",612],[8,"Copy",614],[8,"Serialize",615],[8,"Serializer",615],[3,"AnnotatedImage",458],[3,"FolderDataSet",176],[3,"MemoryDataSet",176],[8,"Iterator",616],[3,"Box",617],[15,"usize"],[3,"DummyDataSet",176],[4,"DynamicImage",618],[3,"Vec",619],[8,"Error",620],[15,"str"],[8,"AnnotatedImageSet",176],[3,"Detection",265],[6,"Class",458],[3,"SlidingWindow",546],[3,"BriefSVMDetector",294],[3,"HOGSVMDetector",294],[8,"WindowGenerator",546],[8,"Read",621],[8,"Write",621],[3,"HOGFeature",353],[3,"BriefFeature",353],[3,"DummyFeature",353],[3,"HogOptions",622],[15,"u8"],[3,"Annotation",458],[3,"ImageWindow",458],[8,"Detector",294],[15,"slice"],[8,"Predictable",427],[6,"Array2",612],[3,"PyramidWindow",546],[3,"SubImage",623],[8,"DataSet",176],[8,"PersistentDetector",294],[8,"Feature",353],[8,"Trainable",456]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
